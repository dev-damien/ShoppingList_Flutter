// Mocks generated by Mockito 5.4.1 from annotations
// in shoppinglist/test/domain/usecases/list_preview_usecases_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shoppinglist/03_domain/entities/list_preview.dart' as _i6;
import 'package:shoppinglist/03_domain/repositories/list_preview_repository.dart'
    as _i3;
import 'package:shoppinglist/core/failures/list_preview_failures.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ListPreviewRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockListPreviewRepository extends _i1.Mock
    implements _i3.ListPreviewRepository {
  MockListPreviewRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<
      _i2
          .Either<_i5.ListPreviewFailure, List<_i6.ListPreview>>> watchAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i4.Stream<
            _i2.Either<_i5.ListPreviewFailure, List<_i6.ListPreview>>>.empty(),
      ) as _i4
          .Stream<_i2.Either<_i5.ListPreviewFailure, List<_i6.ListPreview>>>);
  @override
  _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>> create(
          _i6.ListPreview? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [list],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>.value(
                _FakeEither_0<_i5.ListPreviewFailure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [list],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>> update(
          _i6.ListPreview? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [list],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>.value(
                _FakeEither_0<_i5.ListPreviewFailure, _i2.Unit>(
          this,
          Invocation.method(
            #update,
            [list],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>> delete(
          _i6.ListPreview? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [list],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>.value(
                _FakeEither_0<_i5.ListPreviewFailure, _i2.Unit>(
          this,
          Invocation.method(
            #delete,
            [list],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ListPreviewFailure, _i2.Unit>>);
}
